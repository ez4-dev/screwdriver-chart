# Default values for mychart.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

env: prod
# Set it to true if your apps are running with https protocol
https: false

# Please enable it for RBAC enabled k8s cluster
rbac:
  enabled: true

ingress:
  class: nginx
  # Use tls or not, if set to true, please refer to ingress.yaml and create tls secrets accordingly
  # Reference: https://kubernetes.io/docs/concepts/services-networking/ingress/#tls
  tls: false
  annotations:
    # Override these annotations based on your load balancer configurations
    # kubernetes.io/ingress.class: nginx
    # nginx.ingress.kubernetes.io/rewrite-target: /$2
    # kubernetes.io/tls-acme: "true"
  # This property allows for reports up to a certain size to be uploaded to SonarQube
  # nginx.ingress.kubernetes.io/proxy-body-size: "8m"
  hosts:
    api: screwdriver-api.localtest.me
    ui: screwdriver.localtest.me
    store: screwdriver-store.localtest.me
    queue: screwdriver-queue.localtest.me
  # Enabled singleHost if your api, store, ui are sharing the same host with different path
  singleHost:
    enabled: false
    # Same host with different path example
    # apiPath: /api
    # uiPath: /ui
    # storePath: /store
    apiPath: ""
    uiPath: ""
    storePath: ""
    queuePath: ""

# Set up build notifications or not, if yes please add notification config in your screwdirver-api-secret file
# Reference config: https://github.com/screwdriver-cd/screwdriver/blob/master/config/default.yaml#L235
notifications:
  enabled: false

api:
  name: api
  image: screwdrivercd/screwdriver:stable
  replicas: 1
  ecosystem: {}
  bookends:
    default:
      setup:
        - scm
        - screwdriver-cache-bookend
      teardown:
        - screwdriver-artifact-bookend
        - screwdriver-cache-bookend

ui:
  name: ui
  image: screwdrivercd/ui:stable
  avatarHost: "*.githubusercontent.com"
  replicas: 1

store:
  name: store
  image: screwdrivercd/store:stable
  replicas: 1
  # if s3 is not enabled, will use pod's memory to store logs, artifacts and that't non-persistent
  s3:
    enabled: false
    bucketName: screwdriver-store
    region: us-east-1
    # endpoint: ""
    useAccessKey: true

launcher:
  image: screwdrivercd/launcher
  version: stable

# Enable queue feature or not, this will bring up a queue-worker pod and a redis pod
# Please refer to https://github.com/screwdriver-cd/queue-worker/blob/master/config/custom-environment-variables.yaml
queue:
  name: queue-service
  enabled: true
  replicas: 1
  image: screwdrivercd/queue-service:stable
  buildTimeout: 90
  maxBuildTimeout: 720
  # Resources for build pod
  resources:
      # Number of cpu cores
      # By default, builds run on LOW cpu
      cpu:
          micro: "0.5"
          low: 2
          high: 6
          turbo: 12
      # Memory in GB
      # By default, builds run on LOW memory
      memory:
          micro: 1
          low: 2
          high: 12
          turbo: 16
  k8sResources:
    limits:
      cpu: 2
      memory: 2Gi
    requests:
      cpu: 1
      memory: 1Gi
  port: 80
  ecosystem: {}

# Queue for screwdriver
# Please refer to https://github.com/helm/charts/tree/master/stable/redis for more configurations
redis:
  enabled: true
  # This value is for quick inital setup. For production, please consider using `replication`
  architecture: standalone
  master:
    persistence:
      # To specify non-default storageClass, uncomment the line below and set it accordingly
      # storageClass: "enc-gp2"
      # Enabled it if you want you data to be persistent
      enabled: false
      size: 1Gi
  auth:
    ## @param auth.enabled Enable password authentication
    ##
    enabled: true
    ## @param auth.password Redis&reg; password
    ## Defaults to a random 10-character alphanumeric string if not set
    ##
    password: "yourSuperSecretPassword"
    ## @param auth.existingSecret The name of an existing secret with Redis&reg; credentials
    ## NOTE: When it's set, the previous `auth.password` parameter is ignored
    ##
    existingSecret: ""
    ## @param auth.existingSecretPasswordKey Password key to be retrieved from existing secret
    ## NOTE: ignored unless `auth.existingSecret` parameter is set
    ##
    existingSecretPasswordKey: ""
    ## @param auth.usePasswordFiles Mount credentials as files instead of using an environment variable
    ##
    usePasswordFiles: false
    ## @param auth.usePasswordFileFromSecret Mount password file from secret
    ##
    usePasswordFileFromSecret: true

# Database for screwdriver api, can be either running as a pod or external
# Please refer to https://github.com/helm/charts/tree/master/stable/postgresql for more configurations
postgresql:
  enabled: true
  # To use an external PostgreSQL instance, follow the steps:
  # 1. add a record to your screwdirver-api-secret file with key postgres-password with real password
  # 2. set postgressql enabled to false to prevent creation of postgres as a pod
  # 3. uncomment the line below with your externl postgres server
  # postgresServer: ""
  auth:
    ## @param auth.enablePostgresUser Assign a password to the "postgres" admin user. Otherwise, remote access will be blocked for this user
    ##
    enablePostgresUser: true
    ## @param auth.postgresPassword Password for the "postgres" admin user. Ignored if `auth.existingSecret` is provided
    ##
    postgresPassword: "YourSuperSecretPassword"
    ## @param auth.username Name for a custom user to create
    ##
    username: "screwdriver"
    ## @param auth.password Password for the custom user to create. Ignored if `auth.existingSecret` is provided
    ##
    password: "YourSuperSecretPassword"
    ## @param auth.database Name for a custom database to create
    ##
    database: "screwdriver"
    ## @param auth.existingSecret Name of existing secret to use for PostgreSQL credentials. `auth.postgresPassword`, `auth.password`, and `auth.replicationPassword` will be ignored and picked up from this secret. The secret might also contains the key `ldap-password` if LDAP is enabled. `ldap.bind_password` will be ignored and picked from this secret in this case.
    ##
    existingSecret: ""
  # Specify the TCP port that PostgreSQL should use
  primary:
    service:
      ports:
        postgresql: 5432
    persistence:
      # To specify non-default storageClass, uncomment the line below and set it accordingly
      # storageClass: ""
      # Enabled it if you want you data to be persistent
      # enabled: false
